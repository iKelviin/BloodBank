// <auto-generated />
using System;
using BloodBank.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BloodBank.Infrastructure.Migrations
{
    [DbContext(typeof(BloodBankDbContext))]
    [Migration("20250206105516_CreateDatabase")]
    partial class CreateDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BloodBank.Core.Entities.Donation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DonationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DonorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HealthPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("QuantityMl")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DonorId");

                    b.HasIndex("HealthPostId");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("BloodBank.Core.Entities.Donor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<int>("BloodType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("RhFactor")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Donors");
                });

            modelBuilder.Entity("BloodBank.Core.Entities.HealthPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HealthPosts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4e432145-cecb-4417-a3a3-f730d444d1b4"),
                            Address = "Rua São João, 120",
                            City = "Carapicuíba",
                            Name = "UBS Vila Dirce"
                        },
                        new
                        {
                            Id = new Guid("18028a3e-f4ad-45be-b586-9c63c4627e12"),
                            Address = "Av. Deputado Emílio Carlos, 500",
                            City = "Carapicuíba",
                            Name = "UPA Carapicuíba"
                        },
                        new
                        {
                            Id = new Guid("40457671-1052-4922-bda7-dc721e4833bd"),
                            Address = "Rua Amazonas, 45",
                            City = "Carapicuíba",
                            Name = "UBS Inac"
                        },
                        new
                        {
                            Id = new Guid("cc7f40bf-0ba8-4a91-aeae-c772fbb965f1"),
                            Address = "Rua Ângela Mirella, 354",
                            City = "Barueri",
                            Name = "Hospital Municipal de Barueri"
                        },
                        new
                        {
                            Id = new Guid("948e1a29-0a9b-4394-b748-6296cc7a1513"),
                            Address = "Av. Vinte e Seis de Março, 800",
                            City = "Barueri",
                            Name = "UPA Barueri"
                        },
                        new
                        {
                            Id = new Guid("d5259026-0931-4fcb-bc98-63f0683ecbe2"),
                            Address = "Rua Itajubá, 220",
                            City = "Barueri",
                            Name = "UBS Jardim Belval"
                        },
                        new
                        {
                            Id = new Guid("f39a504a-0b7e-44fc-908b-506d97d878c9"),
                            Address = "Rua da Estação, 200",
                            City = "Osasco",
                            Name = "Hospital Antonio Giglio"
                        },
                        new
                        {
                            Id = new Guid("4a226750-903f-45e3-a1ec-5b76077ad3df"),
                            Address = "Av. Sport Club Corinthians Paulista, 345",
                            City = "Osasco",
                            Name = "UBS Santo Antônio"
                        },
                        new
                        {
                            Id = new Guid("3804fb9d-f363-4b9e-86bf-9ae37e1a1142"),
                            Address = "Rua Pedro Fioretti, 1123",
                            City = "Osasco",
                            Name = "UPA Conceição"
                        },
                        new
                        {
                            Id = new Guid("4aeed005-1117-490b-bf22-e5a24fd95e91"),
                            Address = "Rua Esmeralda, 85",
                            City = "Cotia",
                            Name = "Hospital Regional de Cotia"
                        },
                        new
                        {
                            Id = new Guid("416921ca-7207-444c-a198-6ff2b0bf1bdf"),
                            Address = "Av. Lions Internacional, 1250",
                            City = "Cotia",
                            Name = "UBS Portão"
                        },
                        new
                        {
                            Id = new Guid("bae4338d-aa25-48e6-9885-68c595a8fb12"),
                            Address = "Estr. Morro Grande, 745",
                            City = "Cotia",
                            Name = "UPA Atalaia"
                        },
                        new
                        {
                            Id = new Guid("c06928e9-1545-44d3-827f-611cb493b037"),
                            Address = "Rua Carmem, 112",
                            City = "Jandira",
                            Name = "Hospital Municipal de Jandira"
                        },
                        new
                        {
                            Id = new Guid("756d796f-9a24-4f93-a3ae-1da248bc4b8f"),
                            Address = "Av. Presidente Costa e Silva, 250",
                            City = "Jandira",
                            Name = "UBS Jardim Gabriela"
                        },
                        new
                        {
                            Id = new Guid("47201fd2-7061-49a4-b183-a9fd312581bf"),
                            Address = "Rua São Roque, 1200",
                            City = "Jandira",
                            Name = "UPA Jandira"
                        },
                        new
                        {
                            Id = new Guid("0bfaf448-bd38-47d2-92c2-4668f99cd7f0"),
                            Address = "Rua Benedito de Lima, 250",
                            City = "Itapevi",
                            Name = "Hospital Geral de Itapevi"
                        },
                        new
                        {
                            Id = new Guid("bc827713-406a-4325-a1e2-353911364a4f"),
                            Address = "Av. Rubens Caramez, 987",
                            City = "Itapevi",
                            Name = "UBS Jardim Briquet"
                        },
                        new
                        {
                            Id = new Guid("eda86541-3ecb-4bf6-8ec0-771cf481699f"),
                            Address = "Rua Cesário Verde, 65",
                            City = "Itapevi",
                            Name = "UPA Itapevi"
                        },
                        new
                        {
                            Id = new Guid("0a390b24-257c-484f-b930-1bc1c8e7ab8c"),
                            Address = "Rua Almirante Tamandaré, 150",
                            City = "Santana de Parnaíba",
                            Name = "Hospital Santa Ana"
                        },
                        new
                        {
                            Id = new Guid("560da268-36fd-4708-9d58-6b38bb728560"),
                            Address = "Av. Tenente Marques, 980",
                            City = "Santana de Parnaíba",
                            Name = "UBS Fazendinha"
                        },
                        new
                        {
                            Id = new Guid("a4e7b36a-c336-4dd2-b415-11c4a52e1f44"),
                            Address = "Alameda Rio Negro, 999",
                            City = "Santana de Parnaíba",
                            Name = "UPA Alphaville"
                        });
                });

            modelBuilder.Entity("BloodBank.Core.Entities.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuantityML")
                        .HasColumnType("int");

                    b.Property<string>("RhFactor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("BloodBank.Core.Entities.Donation", b =>
                {
                    b.HasOne("BloodBank.Core.Entities.Donor", "Donor")
                        .WithMany("Donations")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BloodBank.Core.Entities.HealthPost", "HealthPost")
                        .WithMany("Donations")
                        .HasForeignKey("HealthPostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Donor");

                    b.Navigation("HealthPost");
                });

            modelBuilder.Entity("BloodBank.Core.Entities.Donor", b =>
                {
                    b.OwnsOne("BloodBank.Core.Entities.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("DonorId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("City");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("DonorId");

                            b1.ToTable("Donors");

                            b1.WithOwner("Donor")
                                .HasForeignKey("DonorId");

                            b1.Navigation("Donor");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("BloodBank.Core.Entities.Donor", b =>
                {
                    b.Navigation("Donations");
                });

            modelBuilder.Entity("BloodBank.Core.Entities.HealthPost", b =>
                {
                    b.Navigation("Donations");
                });
#pragma warning restore 612, 618
        }
    }
}
