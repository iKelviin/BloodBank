@page "/schedule-donation"

@inject IJSRuntime JSRuntime
@inject IHealthPostService HealthPostService
@inject ILocalStorageService LocalStorage
@inject IDonorService DonorService

<div class="card">
    <div class="card-header">
        <h4 class="card-title mb-0">Agendamento</h4>
    </div><!-- end card header -->
    <div class="card-body">
        <div class="text-center">
            <h1 class="display-6 fw-semibold mb-3">Salve vidas, <span class="text-danger">doe sangue! </span></h1>
        </div>
           
        <div class="row">
            <div class="col-6">
                <label for="place" class="form-label">Local de doação</label>
                <InputSelect class="form-select" id="place" Value="@HealthPost.Id"
                             ValueExpression="@(() => HealthPost.Id)"
                             ValueChanged="@((Guid id) => OnHealthPostSelected(id))">
                    @if (HealthPosts != null && HealthPosts.Count > 0)
                    {
                        <option value="0" selected disabled>Selecione</option>
                        @foreach (var healthPost in HealthPosts!)
                        {
                            <option value="@healthPost.Id">@healthPost.Name</option>
                        }
                    }
                </InputSelect>
            </div>
        </div>
        <div class="row">
            <div class="col-6">
                @if (HealthPost.Id != Guid.Empty)
                {
                    <div class="mt-2">
                        <div class="card card-height-100">
                            <div class="card-body">
                                <h6 class="fs-15 fw-semibold">@HealthPost.Name</h6>
                                <p class="text-muted mb-0">
                                    <i class="ri-building-line align-bottom"></i> @HealthPost.Address
                                    <span class="ms-2">
                                            <i class="ri-map-pin-2-line align-bottom"></i> @HealthPost.City
                                        </span>
                                </p>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        aria-labelledby="data-tab">
        <div>
            <div class="mb-3">
                <label class="form-label mb-0">Seleciona a data</label>
                <input type="text" class="form-control" data-provider="flatpickr" data-date-format="d M, Y"
                       data-minDate="16 02,2025" data-maxDate="20 02,2025">

            </div>
        </div>
        <div class="d-flex align-items-start gap-3 mt-4">
            <button type="button" class="btn btn-success btn-label right ms-auto nexttab nexttab"
                    data-nexttab="pills-experience-tab"><i
                    class="ri-arrow-right-line label-icon align-middle fs-16 ms-2"></i>Submit
            </button>
        </div>

    </div>
    <!-- end card body -->
</div>
<!-- end card -->

@code {
    private List<HealthPostViewModel> HealthPosts = new List<HealthPostViewModel>();
    private HealthPostViewModel HealthPost = new HealthPostViewModel();
    private DonorDetailsViewModel Donor = new DonorDetailsViewModel();
    [Inject] public SweetAlert sweetAlert { get; set; }
    [Inject] public Toastify toast { get; set; }
    private string MinDate = string.Empty;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("carregarSweetAlert");
            //Donor = await LocalStorage.GetItemAsync<DonorDetailsViewModel>("donor");
            await LoadData();
            StateHasChanged();
        }
    }

    private async Task LoadData()
    {
        await LoadHealthPosts();
        await LoadDonor();
        VerifyLastDonation();
    }

    private async Task LoadDonor()
    {
        Guid id = new Guid("f05a0e13-80f4-4bd7-7f61-08dd47c62e1b");
        var result = await DonorService.GetDonorById(id);
        if (!result.IsSucces)
        {
            await toast.ShowError("Erro ao obter dados do doador!");
        }
        else
        {
            Donor = result.Data;
        }
    }

    private void VerifyLastDonation()
    {
        int daysSinceLastDonation = (DateTime.Now - DateTime.Parse(Donor.LastDonation)).Days;
        // 29 12,2030
        DateTime date = DateTime.Now.AddDays(daysSinceLastDonation);
        MinDate = $"{date.Day} {date.Month},{date.Year}";
    }

    private async Task LoadHealthPosts()
    {
        var result = await HealthPostService.GetAll();
        if (!result.IsSucces)
        {
            await toast.ShowError("Erro ao listar os locais de doações!");
        }

        HealthPosts = result.Data;
    }

    private async Task OnHealthPostSelected(Guid id)
    {
        HealthPost = HealthPosts.SingleOrDefault(x => x.Id == id);
        StateHasChanged();
    }

}